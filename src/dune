(executable
 (name cli)
 (libraries lox base cmdliner linenoise stdio)
 (preprocess (pps ppx_jane))
 (modules cli)
)

(library
 (name lox)
 (libraries base camomile compiler-libs.common menhirLib sedlex stdio zarith)
 (inline_tests)
 (preprocess (pps sedlex.ppx ppx_inline_test ppx_deriving ppx_deriving.eq ppx_deriving.show ppx_enumerate sedlex.ppx))
 (modules AST compileLox evalLox lexBuffer lexLox lox menhirParser menhirParserErrors parseLox tokens util)
 (virtual_deps cppo menhir)
 (wrapped false)
)

;; simple menhir config:
;; (menhir
;;   (flags (--explain --ocamlc "'ocamlfind ocamlc -package sedlex -package menhirLib'"))
;;   (modules parser)
;; )

;; Ignore unused rec flag warning
(env
 (release
  (flags (:standard -O3)))
 (_
  (flags (:standard -w -30)))
)


;; generate menhir tokens
(rule
 (targets Tokens_plain.ml)
 (deps MenhirParser.mly)
 (action (run menhir --only-tokens %{deps} --base Tokens_plain)))

;; generate showable tokens -- temporary hack, see https://gitlab.inria.fr/fpottier/menhir/issues/6
(rule
 (targets Tokens.ml)
 (deps    (:f Tokens.cppo.ml) Tokens_plain.ml)
 (action  (run cppo %{f} -n -o %{targets})))

(rule
 (targets MenhirParserErrors.ml)
 (deps (:msgs MenhirParser.messages) (:mly MenhirParser.mly))
 (action (with-stdout-to %{targets} (run menhir --compile-errors %{msgs} %{mly}))))

;; generate parser
(menhir
 (modules MenhirParser)
 (flags (--explain --external-tokens LexLox)))
